class Solution{
    private:
    void solve(int i,int j,vector<vector<int>> &m,int n,
    vector<string> &ans,string move,vector<vector<int>> &vis){
        //base cases....
        if(i==n-1 and j==n-1){
            ans.push_back(move);
            return;
        }
        //DLRU format....
        //downward....
        if(i+1<n && vis[i+1][j]==0 && m[i+1][j]==1){
            vis[i][j]=1; //mark the path at start...
            solve(i+1,j,m,n,ans,move+"D",vis); //no need to remove D in backtracking because when return to that call it automatically at same string without D.....
            vis[i][j]=0; //mark unvisited in backtracking...because any other path can go through node...
        }
        //left....
        if(j-1>=0 && vis[i][j-1]==0 && m[i][j-1]==1){
            vis[i][j]=1; //mark the path at start...
            solve(i,j-1,m,n,ans,move+"L",vis);
            vis[i][j]=0; //mark unvisited in backtracking...because any other path can go through node...
        }
        //right....
        if(j+1<n && vis[i][j+1]==0 && m[i][j+1]==1){
            vis[i][j]=1; //mark the path at start...
            solve(i,j+1,m,n,ans,move+"R",vis);
            vis[i][j]=0; //mark unvisited in backtracking...because any other path can go through node...
        }
        //upward....
        if(i-1>=0 && vis[i-1][j]==0 && m[i-1][j]==1){
            vis[i][j]=1; //mark the path at start...
            solve(i-1,j,m,n,ans,move+"U",vis);
            vis[i][j]=0; //mark unvisited in backtracking...because any other path can go through node...
        }
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
       vector<string> ans;
       vector<vector<int>> vis(n,vector<int>(n,0));
       if(m[0][0]==1) solve(0,0,m,n,ans,"",vis);
       return ans;
    }
};